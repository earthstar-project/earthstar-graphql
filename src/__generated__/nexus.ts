/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

import * as t from "../typeDefs"





declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  AuthorInput: { // input type
    address: string; // String!
    secret: string; // String!
  }
  DocumentInput: { // input type
    format?: NexusGenEnums['DocumentFormat'] | null; // DocumentFormat
    path: string; // String!
    value: string; // String!
  }
}

export interface NexusGenEnums {
  AuthorSortOrder: t.AuthorSortOrder
  DocumentFormat: "es.3"
  DocumentSortOrder: t.DocumentSortOrder
  WorkspaceSortOrder: t.WorkspaceSortOrder
}

export interface NexusGenRootTypes {
  Author: t.ESAuthor;
  DocumentRejectedError: t.DocumentRejectedError;
  ES3Document: t.ES3Document;
  Mutation: {};
  Query: {};
  SetDataSuccessResult: t.SetDataSuccessResult;
  SyncResult: { // root type
    syncedWorkspace?: NexusGenRootTypes['Workspace'] | null; // Workspace
  }
  UnknownFormatDocument: {};
  Workspace: t.ESWorkspace;
  WorkspaceNotFoundError: t.WorkspaceNotFoundError;
  Node: NexusGenRootTypes['Author'] | NexusGenRootTypes['ES3Document'] | NexusGenRootTypes['Workspace'];
  String: string;
  Int: number;
  Float: number;
  Boolean: boolean;
  ID: string;
  JSON: any;
  Document: NexusGenRootTypes['ES3Document'] | NexusGenRootTypes['UnknownFormatDocument'];
  SetResult: NexusGenRootTypes['DocumentRejectedError'] | NexusGenRootTypes['SetDataSuccessResult'] | NexusGenRootTypes['WorkspaceNotFoundError'];
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
  AuthorInput: NexusGenInputs['AuthorInput'];
  DocumentInput: NexusGenInputs['DocumentInput'];
  AuthorSortOrder: NexusGenEnums['AuthorSortOrder'];
  DocumentFormat: NexusGenEnums['DocumentFormat'];
  DocumentSortOrder: NexusGenEnums['DocumentSortOrder'];
  WorkspaceSortOrder: NexusGenEnums['WorkspaceSortOrder'];
}

export interface NexusGenFieldTypes {
  Author: { // field return type
    address: string; // String!
    documents: NexusGenRootTypes['Document'][]; // [Document!]!
    id: string; // ID!
    shortName: string; // String!
    workspaces: NexusGenRootTypes['Workspace'][]; // [Workspace!]!
  }
  DocumentRejectedError: { // field return type
    reason: string; // String!
  }
  ES3Document: { // field return type
    author: NexusGenRootTypes['Author']; // Author!
    id: string; // ID!
    path: string; // String!
    signature: string; // String!
    timestamp: number; // Float!
    value: string; // String!
    workspace: NexusGenRootTypes['Workspace']; // Workspace!
    workspacePath: string; // String!
  }
  Mutation: { // field return type
    set: NexusGenRootTypes['SetResult']; // SetResult!
    sync: NexusGenRootTypes['SyncResult']; // SyncResult!
  }
  Query: { // field return type
    author: NexusGenRootTypes['Author'] | null; // Author
    authors: NexusGenRootTypes['Author'][]; // [Author!]!
    document: NexusGenRootTypes['Document'] | null; // Document
    documents: NexusGenRootTypes['Document'][]; // [Document!]!
    node: NexusGenRootTypes['Node'] | null; // Node
    workspace: NexusGenRootTypes['Workspace'] | null; // Workspace
    workspaces: NexusGenRootTypes['Workspace'][]; // [Workspace!]!
  }
  SetDataSuccessResult: { // field return type
    document: NexusGenRootTypes['Document']; // Document!
  }
  SyncResult: { // field return type
    syncedWorkspace: NexusGenRootTypes['Workspace'] | null; // Workspace
  }
  UnknownFormatDocument: { // field return type
    data: any; // JSON!
  }
  Workspace: { // field return type
    address: string; // String!
    author: NexusGenRootTypes['Author'] | null; // Author
    authors: NexusGenRootTypes['Author'][]; // [Author!]!
    document: NexusGenRootTypes['Document'] | null; // Document
    documents: NexusGenRootTypes['Document'][]; // [Document!]!
    id: string; // ID!
    name: string; // String!
    population: number; // Int!
  }
  WorkspaceNotFoundError: { // field return type
    address: string; // String!
  }
  Node: { // field return type
    id: string; // ID!
  }
}

export interface NexusGenArgTypes {
  Author: {
    documents: { // args
      sortedBy?: NexusGenEnums['DocumentSortOrder'] | null; // DocumentSortOrder
    }
    workspaces: { // args
      sortedBy?: NexusGenEnums['WorkspaceSortOrder'] | null; // WorkspaceSortOrder
    }
  }
  Mutation: {
    set: { // args
      author: NexusGenInputs['AuthorInput']; // AuthorInput!
      document: NexusGenInputs['DocumentInput']; // DocumentInput!
      workspace: string; // String!
    }
    sync: { // args
      pubUrl: string; // String!
      workspace: string; // String!
    }
  }
  Query: {
    author: { // args
      address: string; // String!
    }
    authors: { // args
      sortedBy?: NexusGenEnums['AuthorSortOrder'] | null; // AuthorSortOrder
    }
    document: { // args
      path: string; // String!
    }
    documents: { // args
      sortedBy?: NexusGenEnums['DocumentSortOrder'] | null; // DocumentSortOrder
    }
    node: { // args
      id: string; // ID!
    }
    workspace: { // args
      address: string; // String!
    }
    workspaces: { // args
      sortedBy?: NexusGenEnums['WorkspaceSortOrder'] | null; // WorkspaceSortOrder
    }
  }
  Workspace: {
    author: { // args
      address: string; // String!
    }
    authors: { // args
      sortedBy?: NexusGenEnums['AuthorSortOrder'] | null; // AuthorSortOrder
    }
    document: { // args
      path: string; // String!
    }
    documents: { // args
      sortedBy?: NexusGenEnums['DocumentSortOrder'] | null; // DocumentSortOrder
    }
  }
}

export interface NexusGenAbstractResolveReturnTypes {
  Document: "ES3Document" | "UnknownFormatDocument"
  SetResult: "DocumentRejectedError" | "SetDataSuccessResult" | "WorkspaceNotFoundError"
  Node: "Author" | "ES3Document" | "Workspace"
}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = "Author" | "DocumentRejectedError" | "ES3Document" | "Mutation" | "Query" | "SetDataSuccessResult" | "SyncResult" | "UnknownFormatDocument" | "Workspace" | "WorkspaceNotFoundError";

export type NexusGenInputNames = "AuthorInput" | "DocumentInput";

export type NexusGenEnumNames = "AuthorSortOrder" | "DocumentFormat" | "DocumentSortOrder" | "WorkspaceSortOrder";

export type NexusGenInterfaceNames = "Node";

export type NexusGenScalarNames = "Boolean" | "Float" | "ID" | "Int" | "JSON" | "String";

export type NexusGenUnionNames = "Document" | "SetResult";

export interface NexusGenTypes {
  context: t.Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
}