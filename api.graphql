### This file was generated by Nexus Schema
### Do not make changes to this file directly


"""A person identified by a public key"""
type Author implements Node {
  """
  The author's full address, made of short name and public key, e.g. @suzy.6efJ8v8rtwoBxfN5MKeTF2Qqyf6zBmwmv8oAbendBZHP
  """
  address: String!

  """
  Return a list of documents from this author. If the author is queried within
  the context of a workspace, only their documents from that workspace will be returned
  """
  documents(sortedBy: DocumentSortOrder): [Document!]!
  id: ID

  """The author's short name, without their public key, e.g. suzy"""
  shortName: String!

  """Return a list of workspaces this author has published documents to"""
  workspaces(sortedBy: WorkspaceSortOrder): [Workspace!]!
}

"""An input for signing documents by a specific author"""
input AuthorInput {
  """
  The full address of the author, e.g. @suzy.6efJ8v8rtwoBxfN5MKeTF2Qqyf6zBmwmv8oAbendBZHP
  """
  address: String!

  """The author's secret key, used for signing"""
  secret: String!
}

"""
The order in which to look up the authors. The default is LAST_PUBLISHED_DESC
"""
enum AuthorSortOrder {
  """
  Order authors by their last known published document, least recent first
  """
  LAST_PUBLISHED_ASC

  """
  Order authors by their last known published document, most recent first
  """
  LAST_PUBLISHED_DESC

  """Order authors by name, ascending"""
  NAME_ASC

  """Order authors by name, descending"""
  NAME_DESC
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
`date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO
8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""A document published by authors to a workspace"""
union Document = ES3Document | UnknownFormatDocument

enum DocumentFormat {
  """The third earthstar format!"""
  ES3
}

"""An input for describing a new document"""
input DocumentInput {
  """The format for new document to follow"""
  format: DocumentFormat

  """The path of the document, e.g. /spices/pepper"""
  path: String!

  """The value of the new document, e.g. "I love honey!"""
  value: String!
}

"""
A result indicating that the document was rejected from being set to the
workspace, e.g. because it was signed improperly. The reason will always be
unknown, until I can work out how to get richer data!
"""
type DocumentRejectedError {
  reason: String
}

"""The order in which to look up the documents. The default is NEWEST"""
enum DocumentSortOrder {
  """Order documents by those updated most recently"""
  NEWEST

  """Order documents by those updated least recently"""
  OLDEST
}

"""A document following the ES3 validation format"""
type ES3Document implements Node {
  """The last author who published to this path"""
  author: Author!

  """The date and time this document was published"""
  date: DateTime!
  id: ID

  """
  A string identifying this document like a path in a filesystem, e.g. /wiki/bees
  """
  path: String!

  """The signature of this document that verifies its authenticity"""
  signature: String!

  """
  The number of microseconds since the UNIX era began that this document was published
  """
  timestamp: Float

  """The current value of this document"""
  value: String!

  """The workspace this document belongs to"""
  workspace: Workspace!

  """
  A string identifying this document like a path in a filesystem, prefixed with
  the workspace e.g. +gardening.123456/wiki/bees
  """
  workspacePath: String!
}

"""
The `JSON` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar Json

type Mutation {
  """Set a value to a workspace's path"""
  setDataToWorkspace(
    author: AuthorInput!
    document: DocumentInput!

    """The workspace address to set the data to, e.g. +cooking.123456"""
    workspace: String!
  ): SetResult

  """
  Sync one of the GraphQL server's locally stored workspaces with a pub's
  """
  syncWithPub(
    """The URL of the pub to sync with"""
    pubUrl: String!

    """The address of the workspace to sync, e.g. +camping.98765"""
    workspace: String!
  ): SyncResult
}

"""An object with an ID"""
interface Node {
  """
  An opaque, globally unique identifier, useful for GraphQL clients which use
  this to automatically manage their client-side caches
  """
  id: ID
}

type Query {
  """
  Look up an author by address, e.g. @suzy.6efJ8v8rtwoBxfN5MKeTF2Qqyf6zBmwmv8oAbendBZHP
  """
  author(address: String!): Author

  """Return a list of all authors from all locally stored workspaces"""
  authors(sortedBy: AuthorSortOrder): [Author!]!

  """Look up a document using its path, e.g. +gardening.123/tomato"""
  document(path: String!): Document

  """Return a list of all documents from all locally stored workspaces"""
  documents(sortedBy: DocumentSortOrder): [Document!]!
  node(id: ID!): Node

  """Look up a workspace using its path, e.g. +gardening.123456"""
  workspace(address: String!): Workspace

  """Return a list of locally stored workspaces"""
  workspaces(sortedBy: WorkspaceSortOrder): [Workspace!]!
}

"""A result indicating the document was successfully set to the workspace"""
type SetDataSuccessResult {
  document: Document
}

"""
A possible result following an attempt to set data to a workspace's path
"""
union SetResult = DocumentRejectedError | SetDataSuccessResult | WorkspaceNotFoundError

"""
The result of a sync operation. Currently not very descriptive, need to figure
out how to get richer result data from this operation...
"""
type SyncResult {
  syncedWorkspace: Workspace
}

"""
Returned when the format of the document is not recognised by any of the validators used by this GraphQL server
"""
type UnknownFormatDocument {
  data: Json
}

type Workspace implements Node {
  """The full address of the workspace"""
  address: String!

  """
  Look up an author who has published to this workspace by their address, e.g.
  @suzy.6efJ8v8rtwoBxfN5MKeTF2Qqyf6zBmwmv8oAbendBZHP
  """
  author(address: String!): Author

  """A list of authors who have published to this workspace"""
  authors(sortedBy: AuthorSortOrder): [Author!]!

  """Look up a document in this workspace using its path, e.g. /games/chess"""
  document(path: String!): Document

  """A list of documents published in this workspace"""
  documents(sortedBy: DocumentSortOrder): [Document!]!
  id: ID

  """The name of the workspace, without the following random chars"""
  name: String!

  """The number of authors who have published to this workspace"""
  population: Int
}

"""
A result indicating that the provided workspace is not yet synced on this GraphQL server
"""
type WorkspaceNotFoundError {
  address: String
}

"""
The order in which to look up the workspaces. The default is LAST_ACTIVITY_DESC
"""
enum WorkspaceSortOrder {
  """Order workspaces by those with the most recent activity"""
  LAST_ACTIVITY_ASC

  """Order workspaces by those with the least recent activity"""
  LAST_ACTIVITY_DESC

  """Order workspaces by their names in ascending order"""
  NAME_ASC

  """Order workspaces by their names in descending order"""
  NAME_DESC

  """Order workspaces by those with the least number of authors first"""
  POPULATION_ASC

  """Order workspaces by those with the least number of authors first"""
  POPULATION_DESC
}
